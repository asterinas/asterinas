ENTRY(__multiboot_boot)
OUTPUT_ARCH(i386:x86-64)
OUTPUT_FORMAT(elf64-x86-64)

KERNEL_LMA = 0x8000000;
LINUX_32_ENTRY = 0x8001000;
KERNEL_VMA = 0xffffffff80000000;

SECTIONS
{
    . = KERNEL_LMA + KERNEL_VMA;

    __kernel_start = .;

    .multiboot_header       : AT(ADDR(.multiboot_header) - KERNEL_VMA) { KEEP(*(.multiboot_header)) }
    .multiboot2_header      : AT(ADDR(.multiboot2_header) - KERNEL_VMA) { KEEP(*(.multiboot2_header)) }

    . = LINUX_32_ENTRY + KERNEL_VMA;

    .boot                   : AT(ADDR(.boot) - KERNEL_VMA) { KEEP(*(.boot)) }

    .text                   : AT(ADDR(.text) - KERNEL_VMA) {
        *(.text .text.*)
        PROVIDE(__etext = .);
    }
    .rodata                 : AT(ADDR(.rodata) - KERNEL_VMA) { *(.rodata .rodata.*) }

    .eh_frame_hdr           : AT(ADDR(.eh_frame_hdr) - KERNEL_VMA) {
        PROVIDE(__GNU_EH_FRAME_HDR = .);
        KEEP(*(.eh_frame_hdr .eh_frame_hdr.*))
    }
    . = ALIGN(8);
    .eh_frame               : AT(ADDR(.eh_frame) - KERNEL_VMA) {
        PROVIDE(__eh_frame = .);
        KEEP(*(.eh_frame .eh_frame.*))
    }

    .gcc_except_table       : AT(ADDR(.gcc_except_table) - KERNEL_VMA) { *(.gcc_except_table .gcc_except_table.*) }

    .data.rel.ro            : AT(ADDR(.data.rel.ro) - KERNEL_VMA) { *(.data.rel.ro .data.rel.ro.*) }
    .dynamic                : AT(ADDR(.dynamic) - KERNEL_VMA) { *(.dynamic) }

    .init_array             : AT(ADDR(.init_array) - KERNEL_VMA) {
        __sinit_array = .;
        KEEP(*(SORT(.init_array .init_array.*)))
        __einit_array = .;
    }
    
    .got                    : AT(ADDR(.got) - KERNEL_VMA)  { *(.got .got.*) }
    .got.plt                : AT(ADDR(.got.plt) - KERNEL_VMA)  { *(.got.plt .got.plt.*) }

    . = DATA_SEGMENT_RELRO_END(0, .);
    
    .data                   : AT(ADDR(.data) - KERNEL_VMA) { *(.data .data.*) }

    # The CPU local data storage. It is readable and writable for the bootstrap
    # processor, while it would be copied to other dynamically allocated memory
    # areas for the application processors.
    .cpu_local              : AT(ADDR(.cpu_local) - KERNEL_VMA) {
        __cpu_local_start = .;

        # These 4 bytes are used to store the CPU ID.
        . += 4;

        # These 4 bytes are used to store the number of preemption locks held.
        # The reason is stated in the Rust documentation of
        # [`ostd::task::processor::PreemptInfo`].
        __cpu_local_preempt_lock_count = . - __cpu_local_start;
        . += 4;

        KEEP(*(SORT(.cpu_local)))
        __cpu_local_end = .;
    }

    .bss                    : AT(ADDR(.bss) - KERNEL_VMA) {
        __bss = .;
        *(.bss .bss.*) *(COMMON)
        __bss_end = .;
    }

    # The section to store exception table (ExTable).
    # This table is used for recovering from specific exception handling faults
    # occurring at known points in the code.
    # Ref: /aster-frame/src/arch/x86/ex_table.rs
    .ex_table               : AT(ADDR(.ex_table) - KERNEL_VMA) {
        __ex_table = .;
        KEEP(*(SORT(.ex_table)))
        __ex_table_end = .;
    }

    .ktest_array            : AT(ADDR(.ktest_array) - KERNEL_VMA) {
        __ktest_array = .;
        KEEP(*(SORT(.ktest_array)))
        __ktest_array_end = .;
    }

    .tdata                  : AT(ADDR(.tdata) - KERNEL_VMA) { *(.tdata .tdata.*) }
    .tbss                   : AT(ADDR(.tbss) - KERNEL_VMA) { *(.tbss .tbss.*) }

    . = DATA_SEGMENT_END(.);

    __kernel_end = .;
}
